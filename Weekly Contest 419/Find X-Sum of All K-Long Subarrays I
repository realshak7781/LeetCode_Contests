3318. Find X-Sum of All K-Long Subarrays I





//QUESTION LNK: https://leetcode.com/problems/find-x-sum-of-all-k-long-subarrays-i/description/



TOPIC: HEAPS AND SETS AND HASHING AND SLIDING WINDOW


CODE:


class Solution {
public:
     struct Comparator {
        bool operator()(const pair<int, int>& a, const pair<int, int>& b) const {
            if (a.first == b.first) {
                return a.second > b.second;  
            }
            return a.first > b.first;
        }
    };

    vector<int> findXSum(vector<int>& nums, int k, int x) {
        int n=nums.size();
        int totalElems=n-k+1;
        vector<int> ans(totalElems);

        unordered_map<int,int> freqMap;
        // a freq map of val,freq;

        priority_queue<
            pair<int,int>,
            vector<pair<int,int>>,
             Comparator >
        minHeap;

        for(int i=0;i<k;i++){
            freqMap[nums[i]]++;
        }

        for(auto & p:freqMap){
            if(minHeap.size()<x){
                minHeap.push({p.second,p.first});
            }
            else {
                if (p.second > minHeap.top().first) {
                    minHeap.pop();
                    minHeap.push({p.second, p.first});
                } else if (p.second == minHeap.top().first && minHeap.top().second < p.first) {
                    
                    minHeap.pop();
                    minHeap.push({p.second, p.first});
                }  
            }
           
        }

        int xSum=0;
        while(!minHeap.empty()){
            auto top=minHeap.top();
            xSum+=top.first*top.second;
            minHeap.pop();
        }
        ans[0]=xSum;


        for(int i=1;i+k-1<n;i++){
            freqMap[nums[i-1]]--;
              if (freqMap[nums[i - 1]] == 0) {
                freqMap.erase(nums[i - 1]); 
            }
            freqMap[nums[i+k-1]]++;

             minHeap = priority_queue<pair<int, int>, vector<pair<int, int>>, Comparator>();

         for(auto & p:freqMap){
            if(minHeap.size()<x){
                minHeap.push({p.second,p.first});
            }
            else {
                if (p.second > minHeap.top().first) {
                    minHeap.pop();
                    minHeap.push({p.second, p.first});
                } else if (p.second == minHeap.top().first && minHeap.top().second < p.first) {
                    
                    minHeap.pop();
                    minHeap.push({p.second, p.first});
                }  
            }
           
        }

        int xSum=0;
        while(!minHeap.empty()){
            auto top=minHeap.top();
            xSum+=top.first*top.second;
            minHeap.pop();
        }
        ans[i]=xSum;
        }

        return  ans;
    }
};
