3316. Find Maximum Removals From Source String






//QUESTION LNK: https://leetcode.com/problems/find-maximum-removals-from-source-string/


TOPIC: RECURSION AND DYNAMIC PROGRAMMING


CODE:


class Solution {
private:
int f(string s,string p,unordered_set<int>checkIndex){
     int m = s.length(), n = p.length();
      vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));

    for(int j=0;j<p.length();j++) dp[s.length()][j]=INT_MIN;

    

      for (int i = m - 1; i >= 0; --i) {
            dp[i][n] = (checkIndex.count(i) ? 1 : 0) + dp[i + 1][n];
        }

   for (int i = m - 1; i >= 0; --i) {
            for (int j = n - 1; j >= 0; --j) {
                int ans = INT_MIN;

                if (s[i] == p[j]) {
                    // When thereâ€™s a match in characters
                    if (checkIndex.count(i)) {
                        ans = max({
                            1 + dp[i + 1][j], // Consider as removable
                            dp[i + 1][j + 1]  // Match without removal
                        });
                    } else {
                        ans = dp[i + 1][j + 1];
                    }
                } else {
                    // When there's no match, move forward in the source
                    ans = max(ans, (checkIndex.count(i) ? 1 : 0) + dp[i + 1][j]);
                }

                dp[i][j] = ans;
            }
        }

        // Result is the max removals starting from the beginning of both strings
        return dp[0][0];
    
}    
public:
    int maxRemovals(string source, string pattern, vector<int>& targetIndices) {
        unordered_set<int> checkIndex(targetIndices.begin(),targetIndices.end());
       
        return f(source,pattern,checkIndex);
    }
};
