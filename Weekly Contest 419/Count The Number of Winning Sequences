3320. Count The Number of Winning Sequences






//QUESTION LNK: https://leetcode.com/problems/count-the-number-of-winning-sequences/


TOPIC: RECURSION AND DYNAMIC PROGRAMMING


CODE:


class Solution {
private:
    const int MOD = 1e9 + 7;
    const int OFFSET = 1000; // To handle negative values for `sum`
    long long dp[1010][2001][4]; // Memoization table

    int solve(int ind, std::string &s, int sum, int prev, int n) {
        // Base case: if we reach the end of the string
        if (ind == s.length()) {
            return (sum > 0) ? 1 : 0; // Return 1 if sum is positive
        }

        // Check if the result is already computed
        if (dp[ind][sum + OFFSET][prev] != -1) {
            return dp[ind][sum + OFFSET][prev];
        }

        long long result = 0; // Initialize result as long long

        // Handle previous character scenario
        if (prev == 0) { // No previous character taken
            if (s[ind] == 'F') {
                result = (result + solve(ind + 1, s, sum, 1, n)) % MOD; // F chosen
                result = (result + solve(ind + 1, s, sum + 1, 2, n)) % MOD; // W chosen
                result = (result + solve(ind + 1, s, sum - 1, 3, n)) % MOD; // E chosen
            } else if (s[ind] == 'W') {
                result = (result + solve(ind + 1, s, sum, 2, n)) % MOD; // W chosen
                result = (result + solve(ind + 1, s, sum + 1, 3, n)) % MOD; // E chosen
                result = (result + solve(ind + 1, s, sum - 1, 1, n)) % MOD; // F chosen
            } else if (s[ind] == 'E') {
                result = (result + solve(ind + 1, s, sum, 3, n)) % MOD; // E chosen
                result = (result + solve(ind + 1, s, sum + 1, 1, n)) % MOD; // F chosen
                result = (result + solve(ind + 1, s, sum - 1, 2, n)) % MOD; // W chosen
            }
        } else if (prev == 1) { // Previous character was F
            if (s[ind] == 'F') {
                result = (result + solve(ind + 1, s, sum + 1, 2, n)) % MOD; // W chosen
                result = (result + solve(ind + 1, s, sum - 1, 3, n)) % MOD; // E chosen
            } else if (s[ind] == 'W') {
                result = (result + solve(ind + 1, s, sum, 2, n)) % MOD; // W chosen
                result = (result + solve(ind + 1, s, sum + 1, 3, n)) % MOD; // E chosen
            } else if (s[ind] == 'E') {
                result = (result + solve(ind + 1, s, sum, 3, n)) % MOD; // E chosen
                result = (result + solve(ind + 1, s, sum - 1, 2, n)) % MOD; // W chosen
            }
        } else if (prev == 2) { // Previous character was W
            if (s[ind] == 'F') {
                result = (result + solve(ind + 1, s, sum, 1, n)) % MOD; // F chosen
                result = (result + solve(ind + 1, s, sum - 1, 3, n)) % MOD; // E chosen
            } else if (s[ind] == 'W') {
                result = (result + solve(ind + 1, s, sum + 1, 3, n)) % MOD; // E chosen
                result = (result + solve(ind + 1, s, sum - 1, 1, n)) % MOD; // F chosen
            } else if (s[ind] == 'E') {
                result = (result + solve(ind + 1, s, sum, 3, n)) % MOD; // E chosen
                result = (result + solve(ind + 1, s, sum + 1, 1, n)) % MOD; // F chosen
            }
        } else if (prev == 3) { // Previous character was E
            if (s[ind] == 'F') {
                result = (result + solve(ind + 1, s, sum, 1, n)) % MOD; // F chosen
                result = (result + solve(ind + 1, s, sum + 1, 2, n)) % MOD; // W chosen
            } else if (s[ind] == 'W') {
                result = (result + solve(ind + 1, s, sum, 2, n)) % MOD; // W chosen
                result = (result + solve(ind + 1, s, sum - 1, 1, n)) % MOD; // F chosen
            } else if (s[ind] == 'E') {
                result = (result + solve(ind + 1, s, sum + 1, 1, n)) % MOD; // F chosen
                result = (result + solve(ind + 1, s, sum - 1, 2, n)) % MOD; // W chosen
            }
        }

        // Store the result in the memoization table
        return dp[ind][sum + OFFSET][prev] = result;
    }    

public:
    int countWinningSequences(std::string s) {
        int n = s.length();
        memset(dp, -1, sizeof(dp)); // Initialize the dp array with -1
        return solve(0, s, 0, 0, n); // Start the recursion
    }
};
